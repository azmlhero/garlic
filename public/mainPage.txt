import React, { useState } from "react";
import Data from "../Data.json";
const all = Data.map((p) => p.type); // [17, 17, 35]
const set = new Set(all); // {17, 35} a set removes duplications, but it's still a set
const type = Array.from(set);
console.log(type);
export default function Content() {
  const [searchDish, setSearchDish] = useState("");
  const [searchType, setSearchType] = useState("");
  const [list, setList] = useState([]);
  const [flag, setFlag] = useState(false);
  const [cart,setCart] = useState([])

  const reset_ = () => {
    if (searchDish != "") {
      const test = Data.filter((value) => {
        console.log("1");
        console.log(value);
        
        if (searchDish === "") {
          return value;
        } else if ( searchType=== value.type && value.dish.toLowerCase().includes(searchDish.toLowerCase() ))
         {
          console.log(value)
          return value;
        }
      }).map((product) => product);
      setList(test);
      console.log(list)
      setFlag(true);
    } else {
      setFlag(false);
      console.log(Data);
    }
  };

  const addToCart = (product) => {
    console.log(product)
    let _ = cart
    setCart([...cart, product])

  }
  return (
    <div>
      <div className="productsFilter">
        <div>
          <label> TYPE</label>
          <select
            className="optionsStyle"
            onChange={(e) => {
              setSearchType(e.target.value);
            }}
          >
            <option value="Punjab">Select Type</option>
            {type.map((searchType, id) => {
              return (
                <option key={id} value={searchType}>
                  {searchType}
                </option>
              );
            })}
          </select>
        </div>
        <button onClick={()=>{console.log(cart)}}>click</button>
        <label style={{ margin: "5px 0px 0px 0px" }}> Dish</label>
        <div className="optionsStyle">
          <input
            className=""
            type="search"
            placeholder="Search..."
            onChange={(e) => {
              setSearchDish(e.target.value);
            }}
          />
        </div>
        <button onClick={reset_}>
          Search
          <svg
            className="searchListIcon"
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path>
          </svg>
        </button>
      </div>
      <h1>Products</h1>
      <div className="productsList">
        {flag?(list.map((product) => (
          <div key={product.id}>
            <div className="producteach">
              <img
                className="productsListImg"
                src={product.image}
                alt={product.name}
              />
              <h2 className="productsListName"> {product.name}</h2>
              <b className="productsListType"> Type:- {product.type}</b>

              <p className="productsListPrice"> Price: {product.price}</p>
              <button className="productsListOrder" onClick={()=> addToCart(product)} >Order Now</button>
            </div>
          </div>
        ))):(<h1>No Products Available</h1>)
        }
      </div>
    </div>
  );
}
// useeffect hook may cart wala kaam karna 

//:(Data.map((product) => (
          <div key={product.id}>
            <div className="producteach">
              <img
                className="productsListImg"
                src={product.image}
                alt={product.name}
              />
              <h2 className="productsListName"> {product.name}</h2>
              <b className="productsListType"> Type:- {product.type}</b>

              <p className="productsListPrice"> Price: {product.price}</p>
              <button className="productsListOrder" onClick={()=> addToCart(product)}>Order Now</button>
            </div>
          </div>
)








////////
product part with category 
import { useState, useEffect } from "react";
import { collection, getDocs } from "firebase/firestore";
import MediaCard from "./Components/MediaCard";
import Banner from "./Components/Banner";
import Footer from "./Components/Footer";
import { db } from "../../firebase-config";
import UseMainLayout from "../../layouts/UserMainLayout";
import Loader from "../../components/Loader/Loader";

export default function HomePage() {
  const [product, setProduct] = useState();
  const [categories, setCategories] = useState();
  const [loader, setLoader] = useState(false);

  const categoriesRef = collection(db, "categories");
  const productsRef = collection(db, "products");

  useEffect(() => {
    setLoader(true);
    const getProducts = async () => {
      await getDocs(productsRef)
        .then((res) => {
          setProduct(res.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
          setLoader(false);
        })
        .catch((err) => {
          console.log(err);
        });
    };

    const getCategories = async () => {
      await getDocs(categoriesRef)
        .then((res) => {
          setCategories(res.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
          setLoader(false);
        })
        .catch((err) => {
          console.log(err);
        });
      setLoader(false);
    };
    setLoader(true);
    getProducts();
    getCategories();
  }, []);

  return (
    <UseMainLayout>
      <Banner />
      <hr />
      {loader ? (
        <Loader className="min-h-screen" />
      ) : (
        <>
          {categories?.map((item) => (
            <div className="flex justify-center" key={item.id}>
              <div>
                <h1 className="py-4 text-xl font-extrabold">{item?.name}</h1>
                <div className="overflow-x-scroll lg:w-2xl 2xl:w-[1400px] xl:w-[1100px] lg:w-[900px] md:w-[700px] sm:w-[600px] ">
                  <div className="flex w-fit">
                    {product?.map((product) => (
                      <span key={product.id}>
                        {item?.name === product?.category && (
                          <MediaCard obj={product} key={product} />
                        )}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </>
      )}
      <Footer />
    </UseMainLayout>
  );
}

/////////////
MediaCard  product page

import * as React from "react";
import { Link } from "react-router-dom";

export default function MediaCard(obj) {
  return (
    <div className="bg-white mx-2 rounded-lg hover:drop-shadow-2xl h-72 w-52 xl:h-72 xl:w-56 2xl:h-96 2xl:w-64">
      <Link to={`/product/${obj.obj.id}`}>
        <img
          src={
            obj.obj.image ? (
              obj.obj.image
            ) : (
              <div className="flex h-full w-full items-center justify-center rounded border border-gray-200 object-cover object-center lg:w-1/2">
                <div className="h-40 w-40 animate-spin rounded-full border-t-4 border-b-4 border-blue-900" />
              </div>
            )
          }
          alt="img"
          className="w-full xl:h-44 2xl:h-52 h-44"
        />

        <div style={{ padding: "6px" }}>
          <h1 className="xl:text-large h-12  2xl:h-20 2xl:text-2xl">
            {obj.obj.name.slice(0, 25)}
            ...
          </h1>
          <h1 className="xl:text-md  text-gray-400 h-6">
            {obj.obj.description.slice(0, 15)}
            ...
          </h1>
          <h2
            className="font-bold text-indigo-600 xl:text-xl 2xl:text-2xl"
            // variant="h5"
          >
            Rs. {obj.obj.salePrice ? obj.obj.salePrice : "N/A"}
          </h2>
        </div>
      </Link>
    </div>
  );
}

/// 
checkout page email password
const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();
  console.log(errors);


  const getTotal = () => {
    let num = 0;
    location.state.id.map((prod) => {
      num += prod.quantity *prod.salePrice;
    });
    setTotal(num);
  };

  useEffect(() => {
    getTotal();
  }, [prod]);
  useEffect(() => {
    getTotal();
  }, [qty]);


  const checkout = async () => {
    const newItem = {
      authUserEamil: user?.email,
      email,
      name,
      address,
      city,
      postal,
      phone,
      card,
      NOC,
      expiry,
      cvv,
      total,
      cart: products,
      time: new Date(),
    };
    console.log(newItem);
  <input
              className="mb-2 w-full rounded-md border border-solid border-slate-400"
              type="email"
              placeholder="Email *"
              {...register("email", {
                required: "Email is required",
                pattern: {
                  value: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/,
                  message: "Invalid Email!  Example: abc@gmail.com",
                },
              })}
            />
  <input
              className="mb-2 w-full rounded-md border border-solid border-slate-400"
              type="email"
              placeholder="Email *"
              {...register("email", {
                required: "Email is required",
                pattern: {
                  value: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/,
                  message: "Invalid Email!  Example: abc@gmail.com",
                },
              })}
            />
            {errors.email && (
              <div className="mb-4 text-red-600">{errors.email.message}</div>
            )}
            <div className="relative">
              <input
                className="mb-2 mt-2 w-full rounded-md border border-solid border-slate-400"
                type={showPassword ? "text" : "password"}
                placeholder="Password *"
                {...register("password", {
                  required: "Password is required",
                  minLength: {
                    value: 8,
                    message: "Password must be at least 8 characters",
                  },
                })}
              />
          
          add new product and cart 
          
  // function addToCart() {
  //   const newProduct = {
  //     quantity: qty,
  //     product: prod,
  //     p_id: prod.id,
  //   };

  // // const addToCart = (product) => {
  // //   console.log(product);
  // //   let _ = cart;
  // //   setCart([...cart, product]);
  // // };

  //   setProd(newProduct);
  // }

  //   // Rs. {qty * prod.price}
  /// Mui editing
 {/*
            <TextField
              sx={{ margin: "0px 30px 10px 30px" }}
              label="Last Name"
              InputLabelProps={{
                shrink: true,
              }}
              type="text"
              value={email}
              // value={inputs.username || ""}
              onChange={(e) => {
                setEmail(e.target.value);
              }}
            /> */}
           
///
add in arr
           //     console.log(newOrder);
  //      const prod = doc(db, "products", id);
  //      await updateDoc(prod, newProduct).then(()=>{setUpdateOpen(true);});
  //     console.log("Product Updated");
  //   };

  // console.log(errors);

  
  // const handleChange = (event) => {
  //   const name = event.target.name;
  //   const value = event.target.value;
  //   setInputs((values) => ({ ...values, [name]: value }));
  // };

//
regex

              // {...register("email", {
              //   required: "Email is required",
              //   pattern: {
              //     value: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/,
              //     message: "Invalid Email!  Example: abc@gmail.com",
              //   },
              // })}