Note:  write  css in index.css for classes and ids
http://localhost:3000/product/7Azu98zH4Q7VJQYg3baZ
each product page link 


/*
 <Route exact path="/" element={<HomePage />} />
 <Route exact path="/product/:id" element={<Product />} />
 import { NavLink, useNavigate } from "react-router-dom";

 <NavLink
 to="/services"
 className={({ isActive }) =>
   c(
     isActive
       ? "bg-gray-900 text-white"
       : "text-gray-300 hover:bg-gray-700 hover:text-white",
     "rounded-md bg-gray-800 px-3 py-2 text-sm font-medium text-white"
   )
 }
>
 Services
</NavLink>
*/



// all product file whre it called 
// import * as React from "react";
// import { useState, useEffect } from "react";
// import {
//   collection,
//   getDocs,
//   query,
//   limit,
//   startAfter,
//   orderBy,
// } from "firebase/firestore";

// import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
// import Button from "@material-ui/core/Button";
// import MediaCard from "./Components/MediaCard";
// import { db } from "../../firebase-config";
// import Footer from "./Components/Footer";
// import UseMainLayout from "../../layouts/UserMainLayout";

// export default function Products() {
//   const [categories, setCategories] = useState();
//   const [currentCategory, setCurrentCategory] = useState("");
//   const [products, setProducts] = useState([]);
//   const [paginateProducts, setPaginateProducts] = useState([]);
//   const [lastDoc, setLastDoc] = useState();
//   const [moreProductLoader, setMoreProductLoader] = useState(false);
//   const [isEmpty, setIsEmpty] = useState(false);
//   const [loader, setLoader] = useState(false);
//   const productsCollection = collection(db, "products");
//   const categoriesCollection = collection(db, "categories");

//   useEffect(() => {
//     // Function Calls
//     setLoader(true);
//     getProducts();
//     getCategories();
//     pagination();
//   }, []);

//   const getProducts = async () => {
//     const data = await getDocs(productsCollection);
//     setProducts(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
//     setLoader(false);
//   };

//   const getCategories = async () => {
//     const data = await getDocs(categoriesCollection);
//     setCategories(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
//     setLoader(false);
//   };

//   const pagination = async () => {
//     const first = query(
//       collection(db, "products"),
//       limit(6),
//       orderBy("costPrice", "asc")
//     );
//     const documentSnapshots = await getDocs(first).then((doc) => {
//       const pageData = doc.docs.map((prods) => ({
//         ...prods.data(),
//         id: prods.id,
//       }));
//       const lastVisible = doc.docs[doc.docs.length - 1];

//       setPaginateProducts(pageData);
//       console.log(paginateProducts);
//       setLastDoc(lastVisible);
//     });
//   };

//   const fetchMore = () => {
//     setMoreProductLoader(true);
//     const next = query(
//       collection(db, "products"),
//       limit(6),
//       orderBy("costPrice", "asc"),
//       startAfter(lastDoc)
//     );
//     const documentSnapshots2 = getDocs(next).then((doc) => {
//       const isCollectionEmpty = doc.size === 0;
//       if (!isCollectionEmpty) {
//         setMoreProductLoader(false);
//         const pageData = doc.docs.map((prods) => ({
//           ...prods.data(),
//           id: prods.id,
//         }));
//         const lastVisible = doc.docs[doc.docs.length - 1];

//         setPaginateProducts((paginateProducts) => [
//           ...paginateProducts,
//           ...pageData,
//         ]);
//         setLastDoc(lastVisible);
//         setMoreProductLoader(false);
//       } else {
//         setIsEmpty(true);
//         setMoreProductLoader(false);
//       }
//     });
//   };

//   return (
//     <UseMainLayout>
//       <div>
//         <div className="pt-20 flex flex-col justify-center">
//           <h1 className="sm:flex bg-slate-100 pl-20 font-bold">
//             Categories <ArrowForwardIcon /> {currentCategory}
//           </h1>
//           <div className="bg-slate-100 sm:flex">
//             <div className="w-96 p-16 text-black ">
//               <div className="flex w-56 flex-col items-start rounded-md bg-white shadow-lg ring-1 ">
//                 <h1 className="block w-full px-4 py-2 text-left text-lg font-bold text-gray-700">
//                   Categories
//                 </h1>
//                 {categories?.map((item, index) => (
//                   <Button
//                     key={index}
//                     className="w-full px-4 py-2 text-black hover:font-bold"
//                     onClick={() => {
//                       setCurrentCategory(item.name);
//                     }}
//                   >
//                     <span className="w-full text-left">{item?.name}</span>
//                   </Button>
//                 ))}
//               </div>
//             </div>
//             <hr />
//categories file 

// import { useState, useEffect } from "react";
// import * as React from "react";
// import { collection, getDocs } from "firebase/firestore";
// import { db } from "../../firebase-config";
// import UseMainLayout from "../../layouts/UserMainLayout";

// export default function Categories() {
//   //  Get Categories Names
//   const [cat, setCat] = useState([]);
//   const catCollection = collection(db, "categories");

//   useEffect(() => {
//     // Search Categories
//     const getCategories = async () => {
//       const data = await getDocs(catCollection);
//       setCat(data.docs.map((doc) => doc.data().name));
//     };

//     // Function Calls
//     getCategories();
//   }, []);

//   return (
//     <UseMainLayout>
//       <h1>Categories</h1>
//       {cat.map((item) => (
//         <div className=" m-4 p-2">
//           <h1 className="p-12 text-6xl border-2 border-indigo-600 w-96 bg-indigo-300 hover:bg-indigo-400 flex justify-center hover:drop-shadow-xl">
//             {item}
//           </h1>
//         </div>
//       ))}
//     </UseMainLayout>
//   );
// }

// {data.map((product)=> {
//     return (

//         // (new Set(yourArray.map((item) => item.id)))
//     )

// })}

like 

.divBody {
  
  position: relative;
  width: 32%;
  height: 500px;
  display: inline-block;
 
}
.divBody2{

  position: relative;

  width: 33%;
  height: 90px;
  border: 1px solid black;
  color: black;
  top: 15%;
  left: 40%;
  /* background-color :#fef8dd ; */
 
 text-align: center;
 justify-content: center;

}
.inputBody{
  position:relative;
  width:100px;
  height:10px ; 
  /* position: 10px 0px 0px 0px; */
  
color: black;
  top:10px;
  right:0px;
  left:0px;
  bottom:0px;
  padding: 0.5em;
  margin: 0.5em;

  border: none;
  border-radius: 3px;
}
import React from "react";

const data = [
  {
    id: 0,
    name: "AKG Earphones",
    price: "300",
    image: "./assets/AKG.jpg",
    
  },
  {
    id: 1,
    name: "Beats Bluetooth Earphone ",
    price: "3000",
    image: "./assets/beatsBt.jpg",
   
  },
  {
    id: 2,
    name: "Gionee Earphone",
    price: "400",
    image: "./assets/Gionee.jpg",
  
  },
  {
    id: 3,
    name: "Ligtning Cable",
    price: "500",
    image: "./assets/lightningCable.jpg",
    
  },
];

export default function ProductList() {
  return (
    
      <div className="p-10">
        <h1 className="text-3xl font-bold">Products</h1>
        
          <div className="grid grid-flow-row grid-cols-4 gap-10">
            {data.map((product) => (
              <div className="border-solid border-2 p-10 m-8" key={product.id}>
                <img src={product.image} alt={product.name} />
               <div className="flex px-4">
                  <b className="text-2xl">{product.name}</b>
                  <i className="text-2xl "> Price {product.price}</i>
                </div>
                  <button className="bg-red-500 text-white text p-2 m-6">
                    Buy Now
                  </button>
                
              </div>
            ))}
          </div>
        </div>
      
   
  );
}


import React from "react";

export default function Header() {
  return (
    <div>
      <h1 className="text-4xl  bg-indigo-300">
        AZ<i>Tech</i>
      </h1>
    </div>
  );
}





task 4 function list 
import { people } from './data.js';
import { getImageUrl } from './utils.js';

export default function List() {
  const chemists= people.filter(person=>person.profession==="chemist");
 const mix= people.filter(person=>person.profession!=="chemist");
  const  chemistsItems =chemists.map(person=>
   
   <li key={person.id}>
   <img src={getImageUrl(person)}
     alt={person.name}/>

     <p><b>{person.name}:</b>
       {" "+ person.profession + " "}
       known for {person.accomplishment}
     </p>
     
   </li>
   );
  const listItems = mix.map(person =>
    <li key={person.id}>
      <img
        src={getImageUrl(person)}
        alt={person.name}
      />
      <p>
        <b>{person.name}:</b>
        {' ' + person.profession + ' '}
        known for {person.accomplishment}
      </p>
    </li>
  );
  return (
    <article>
      <h1>Scientists</h1>
      <h1>Chemist</h1>
      <ul>{chemistsItems}</ul>
      <h1>Everyone Else</h1>
      <ul>{listItems}</ul>
      
      
    </article>
  );
}

task 5 Make a list of recipes from this array! For each recipe in the array, display its title as an <h2> and list its ingredients in a <ul>.


import { recipes } from './data.js';

export default function RecipeList() {
  const recipItem = recipes.map(rec=>
    <li key={rec.id}> 
      <p><h2>{rec.name}</h2><br/>
      <ul>{" "+rec.ingredients+" "}</ul>
      </p>
      
    </li>
    
    );
  return (
    <div>
      <h1>Recipes</h1>
      <ul>{recipItem}</ul>
    </div>
  );
}



  <div>
        <div className="pt-20 flex flex-col justify-center">
          <h1 className="sm:flex bg-slate-100 pl-20 font-bold">
            Categories <ArrowForwardIcon /> {currentCategory}
          </h1>
          <div className="bg-slate-100 sm:flex">
            <div className="w-96 p-16 text-black ">
              <div className="flex w-56 flex-col items-start rounded-md bg-white shadow-lg ring-1 ">
                <h1 className="block w-full px-4 py-2 text-left text-lg font-bold text-gray-700">
                  Categories
                </h1>
                {categories?.map((item, index) => (
                  <Button
                    key={index}
                    className="w-full px-4 py-2 text-black hover:font-bold"
                    onClick={() => {
                      setCurrentCategory(item.name);
                    }}
                  >
                    <span className="w-full text-left">{item?.name}</span>
                  </Button>
                ))}
              </div>
            </div>
            <hr />


import { useState, useEffect } from "react";
import * as React from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../../firebase-config";
import UseMainLayout from "../../layouts/UserMainLayout";

export default function Categories() {
  //  Get Categories Names
  const [cat, setCat] = useState([]);
  const catCollection = collection(db, "categories");

  useEffect(() => {
    // Search Categories
    const getCategories = async () => {
      const data = await getDocs(catCollection);
      setCat(data.docs.map((doc) => doc.data().name));
    };

    // Function Calls
    getCategories();
  }, []);

  return (
    <UseMainLayout>
      <h1>Categories</h1>
      {cat.map((item) => (
        <div className=" m-4 p-2">
          <h1 className="p-12 text-6xl border-2 border-indigo-600 w-96 bg-indigo-300 hover:bg-indigo-400 flex justify-center hover:drop-shadow-xl">
            {item}
          </h1>
        </div>
      ))}
    </UseMainLayout>
  );
}




structure for api and filter data


function MyComponent() {
      const [error, setError] = useState(null);
      const [isLoaded, setIsLoaded] = useState(false);
      const [items, setItems] = useState([]);

      // Note: the empty deps array [] means
      // this useEffect will run once
      // similar to componentDidMount()
      useEffect(() => {
        fetch("https://api.example.com/items")
          .then(res => res.json())
          .then(
            (result) => {
              setIsLoaded(true);
              setItems(result);
            },
            // Note: it's important to handle errors here
            // instead of a catch() block so that we don't swallow
            // exceptions from actual bugs in components.
            (error) => {
              setIsLoaded(true);
              setError(error);
            }
          )
      }, [])

      if (error) {
        return <div>Error: {error.message}</div>;
      } else if (!isLoaded) {
        return <div>Loading...</div>;
      } else {
        return (
          <ul>
            {items.map(item => (
              <li key={item.id}>
                {item.name} {item.price}
              </li>
            ))}
          </ul>
        );
      }
    }
not working traversy 
import React from "react";
import Banner from "./Banner";
import Data from "./Data.json"

const all = Data.map((p) => p.type); // [17, 17, 35]
const set = new Set(all); // {17, 35} a set removes duplications, but it's still a set
const type = Array.from(set);
console.log(type);

// const type = Array.from(set).map((prod)=>{});
const arr = Data.map((p) => p.dish); // [17, 17, 35]
const set2 = new Set(arr); // {17, 35} a set removes duplications, but it's still a set
const dish = Array.from(set2);
console.log(dish);


var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        var response = JSON.parse(xhttp.responseText);
        var food= response.data;
        console.log(food);

        var output="";
        for (var i= 0; data.length;i++)
        {
            output += '<li>'+ data[i]+'</li>';
        }
        
        document.getElementById("data").innerHTML = output;

    //    console.log(xhttp.responseText);
        // Typical action to be performed when the document is ready:
    
    }
};
xhttp.open("GET", "Data.json", true);
xhttp.send();

export default function Home() {
  return (
    
    <div>
      <div>
        <Banner />

        <label> TYPE</label>

        <select className="optionsStyle">
          <option value="Punjab">Select Type</option>
          {type.map((res,id) => {
            return (
              <option key={id} value={res}>{res}</option>

              // const chemists= people.filter(product=>product.type==="chemist");
              // .catch((err) => {
              //     console.log(err)}
            );
          })}
        </select>
        <label> Dish</label> 
        <input placeholder="Search by Type Dish Name" value="Pakistan" className="optionsStyle">
          <option value="Pakistan">Select Dish</option>
          {
            dish.map((res,id)=>{
                return(
                    <option key={id} value={res}>{res}</option>
                )
            })
          }

        </input>
        {/* <div className="searchList">svg className="searchListIcon" */}
        {/* <Search onClick=>(getFilteredData())/> */}
        <button >Search <svg className="searchListIcon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg></button>
        

        <h1>Products</h1>
        <div className="productsList">
          {Data.map((product) => (
            <div key={product.id}>
              
              <div className="producteach">
              <img
                className="productsListImg"
                src={product.image}
                alt={product.name}
              />
                <h2 className="productsListName"> {product.name}</h2>
                <b className="productsListType"> Type:-  {product.type}</b>
                
                <p className="productsListPrice" > Price: {product.price}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
    </div>
  );
}
import React from "react";
import Data from "./Data.json";
import { useState } from "react";

export default function SearchFilter() {
  const [searchTerm, setSearchTerm] = useState("");

  return (
    <div>
      <input
        type={search}
        placeholder="Search..."
        onChange={(e) => {
          setSearchTerm(e.target.value);
        }}
      />
      {Data.dish
        .filter((value) => {
          if (searchTerm == "") {
            return value;
          } else if (
            value.dish.toLowerCase().includes(searchTerm.toLowerCase())
          ) {
            return value;
          }
        })
        .map((val, id) => {
          return <div key={id}> {val.dish}</div>;
        })}





        

      <select className="optionsStyle">
        <option value="Pakistan">Select Dish</option>
        {dish.map((res, id) => {
          return (
            <option key={id} value={res}>
              {res}
            </option>
          );
        })}
      </select>
    </div>
  );
}

        {/* <div className="searchList">svg className="searchListIcon" */}
        {/* <Search onClick=>(getFilteredData())/> */}
        {/* <h1>Products</h1>
        <div className="productsList">
          {data.map((product) => (
            <div key={product.id}>
              
              <div className="producteach">
              <img
                className="productsListImg"
                src={product.image}
                alt={product.name}
              />
                <h2 className="productsListName"> {product.name}</h2>
                <b className="productsListType"> Type:-  {product.type}</b>
                
                <p className="productsListPrice" > Price: {product.price}</p>
              </div>
            </div>
          ))}
        </div> */}
        
          // const chemists= people.filter(product=>product.type==="chemist");
          // .catch((err) => {
          //     console.log(err)}

          // import React from "react";
// import Data from "./Data.json";
// import { useState } from "react";

// export default function SearchFilter() {
//   const [searchType, setSearchType] = useState("");

//   return (
//     <div>
//       <div  >
//       <label> Dish</label>
//         <div className="optionsStyle">
//         <input
//           className=""
//           type="search"
//           placeholder="Search..."
//           onChange={(e) => {
//             setSearchType(e.target.value);
//           }}
//         /></div>
//         <button>
//           Search
//           <svg
//             className="searchListIcon"
//             class="w-6 h-6"
//             fill="none"
//             stroke="currentColor"
//             viewBox="0 0 24 24"
//             xmlns="http://www.w3.org/2000/svg"
//           >
//             <path
//               stroke-linecap="round"
//               stroke-linejoin="round"
//               stroke-width="2"
//               d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
//             ></path>
//           </svg>
//         </button>
//         <h1>Products</h1>
//       </div>
//       <div className="productsList">
//         {Data.filter((value) => {
//           if (searchType === "") {
//             return value;
//           } else if (
//             value.dish.toLowerCase().includes(searchType.toLowerCase())
//           ) {
//             return value;
//           }
//         }).map((product) => (
//           <div key={product.id}>
//             <div className="producteach">
//               <img
//                 className="productsListImg"
//                 src={product.image}
//                 alt={product.name}
//               />
//               <h2 className="productsListName"> {product.name}</h2>
//               <b className="productsListType"> Type:- {product.type}</b>

//               <p className="productsListPrice"> Price: {product.price}</p>
//             </div>
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// }
// const type = data.map((prod)=>{return(new Set(prod.type))})

const all = data.map((p) => p.type); // [17, 17, 35]
const set = new Set(all); // {17, 35} a set removes duplications, but it's still a set
const type = Array.from(set);
console.log(type);

// const type = Array.from(set).map((prod)=>{});
const arr = data.map((p) => p.dish); // [17, 17, 35]
const set2 = new Set(arr); // {17, 35} a set removes duplications, but it's still a set
const dish = Array.from(set2);
console.log(dish);


const data = [
  {
    id: 0,
    name: "Matka Pizza",
    type: "Italian",
    // type:  "Italian",
    dish: "Pizza",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "789Rs",
  },
  {
    id: 1,
    name: "Tikka Pizza",
    type: "Italian",
    dish: "Pizza",
    image: "./foodBhalo.jpg",
    //qty: "8",
    price: "908Rs",
  },
  {
    id: 2,
    name: "Malai boti Pizza",
    type: "Italian",
    dish: "Pizza",
    image: "./foodBhalo.jpg",
    //qty: "9",
    price: "799Rs",
  },
  {
    id: 3,
    name: "Grill Burger",
    type: "Grill",
    // type:  "Grill",
    dish: "Burger",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "579Rs",
  },
  {
    id: 4,
    name: "Zinger Burger",
    type: "Zinger",
    dish: "Burger",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "789Rs",
  },
  {
    id: 5,
    name: "Cheese Burger",
    type: "Cheese Lover",
    dish: "Burger",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "999Rs",
  },
  {
    id: 6,
    name: "Club Sandwitch",
    type: "Italian",
    dish: "Sandwitch",
    image: "./foodBhalo.jpg",
    //qty: "20",
    price: "779Rs",
  },
  {
    id: 7,
    name: "Grill Sandwitch",
    type: "Italian",
    dish: "Sandwitch",
    image: "./foodBhalo.jpg",
    //qty: "15",
    price: "899Rs",
  },
  {
    id: 8,
    name: "Loaded Fries",
    type: "Fast Food",
    dish: "Pizza",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "499Rs",
  },
  {
    id: 9,
    name: "Chicken Karahi",
    type: "Desi Food",
    dish: "Karahi",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "2100Rs",
  },
  {
    id: 10,
    name: "Dumba Karahi",
    type: "Desi Food",
    dish: "Karahi",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "2700Rs",
  },
  {
    id: 11,
    name: " Palao Sajji ",
    type: "Desi Food",
    dish: "Sajji",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "489Rs",
  },
  {
    id: 12,
    name: " Palao Kabab ",
    type: "Desi Food",
    dish: "Palao ",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "289Rs",
  },
  {
    id: 13,
    name: "Nalli Biryani",
    type: "Desi Food",
    dish: "Biryani",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "789Rs",
  },
  {
    id: 14,
    name: "Karachi Biryani",
    type: "Desi Food",
    dish: "Biryani",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "399Rs",
  },
  {
    id: 15,
    name: "Grill Fish",
    type: "Desi Food",
    dish: "Fish",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "1399Rs",
  },
  {
    id: 16,
    name: "Fried Fish",
    type: "Desi Food",
    dish: "Fish",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "1100Rs",
  },
  {
    id: 17,
    name: "Qasoori Falooda",
    type: "Desi Food",
    dish: "Falooda",
    image: "./foodBhalo.jpg",
    //qty: "10",
    price: "300Rs",
  },
  //   {
  //     id: 18,
  //     name: "latraza",
  //     type: "turkish" ,
  //     dish: "Falooda",
  //     image: "./foodBhalo.jpg",
  //     //qty: "10",
  //     price: "300Rs",
  //   },
];


////////////////////////

Each product page 

import * as React from "react";
import { useState, useEffect } from "react";
import { Link, useParams, useNavigate } from "react-router-dom";
import { Button, Modal, Fade } from "@mui/material";
import { onAuthStateChanged } from "firebase/auth";
import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";
import { Rating } from "@mui/material";
import { useForm } from "react-hook-form";
import {
  collection,
  addDoc,
  getDoc,
  doc,
  deleteDoc,
  updateDoc,
  query,
  where,
  getDocs,
  limit,
  orderBy,
  startAfter,
} from "firebase/firestore";

import { db, auth } from "../../firebase-config";
import Footer from "./Components/Footer";
import UseMainLayout from "../../layouts/UserMainLayout";
import Carousel from "../../components/Carousel";
import Loader from "../../components/Loader/Loader";

export default function Product() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();
  const navigate = useNavigate();
  const { id } = useParams();
  const cartRef = collection(db, "cart");
  const reviewsRef = collection(db, "reviews");
  const favouritesRef = collection(db, "favourites");

  const [prod, setProduct] = useState();
  const [qty, setQty] = useState(1);
  const [user, setUser] = useState({});
  const [rating, setRating] = useState(1);
  const [getComments, setGetComments] = useState([]);
  const [lastComment, setLastComment] = useState(0);
  const [favourite, setFavourite] = useState("");
  const [addStatus, setAddStatus] = useState(false);
  const [totalRating, setTotalRating] = useState(0);
  const [moreCommentLoader, setMoreCommentLoader] = useState(false);
  const [isEmpty, setIsEmpty] = useState(false);
  const [load, setLoad] = useState(false);

  const [dummy, setDummy] = useState(0);

  // Modals
  const [comModal, setComModal] = useState(false);
  const [notLogModal, setNotLogModal] = useState(false);

  // Quntity Picker
  const incrementCounter = () => {
    if (qty != prod.stock && qty < prod.stock) setQty(qty + 1);
  };

  const decrementCounter = () => {
    if (qty >= 1) setQty(qty - 1);
  };

  const getProduct = async () => {
    const x = await getDoc(doc(db, `products/${id}`));
    setProduct({ id: x.id, ...x.data() });
    console.log({ id: x.id, ...x.data() });
  };

  useEffect(() => {
    onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      getFav(currentUser);
    });

    getProduct();
    getComment();
  }, [user, id]);

  useEffect(() => {
    calRating();
  }, [getComments]);

  const addComment = async (data, event) => {
    const newComment = {
      comment: data.reviews,
      prod_id: prod?.id,
      rating: rating,
      time: new Date(),
      user: user?.email,
    };

    if (user)
      await addDoc(reviewsRef, newComment).then(() => {
        setComModal(true);
        event.target.reset();
      });
    else setNotLogModal(true);

    getComment();
  };

  const getComment = async () => {
    const firstComments = query(
      reviewsRef,
      limit(5),
      where("prod_id", "==", id),
      orderBy("time", "desc")
    );

    await getDocs(firstComments)
      .then((doc) => {
        const commentData = doc.docs.map((com) => ({
          ...com.data(),
          id: com.id,
        }));
        const lastVisible = doc.docs[doc.docs.length - 1];

        setGetComments(commentData);
        setLastComment(lastVisible);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const fetchMoreComments = async () => {
    setMoreCommentLoader(true);
    const nextComments = query(
      reviewsRef,
      limit(5),
      where("prod_id", "==", id),
      orderBy("time", "desc"),
      startAfter(lastComment)
    );
    await getDocs(nextComments).then((doc) => {
      const isCollectionEmpty = doc.size === 0;
      if (!isCollectionEmpty) {
        setMoreCommentLoader(false);
        const commentData = doc.docs.map((com) => ({
          ...com.data(),
          id: com.id,
        }));
        const lastVisible = doc.docs[doc.docs.length - 1];

        setGetComments((getComments) => [...getComments, ...commentData]);
        setLastComment(lastVisible);
        setMoreCommentLoader(false);
      } else {
        setIsEmpty(true);
        setMoreCommentLoader(false);
      }
    });
  };

  function calRating() {
    let r = 0;
    getComments?.map((item) => {
      r += item.rating;
    });
    r = r / getComments?.length;
    setTotalRating(r);
  }

  const addToFavourites = async () => {
    const newObj = {
      product: prod,
      user: user?.email,
      status: "true",
      product_id: prod.id,
    };

    if (user) {
      // setLoader(true);
      setLoad(true);
      await addDoc(favouritesRef, newObj)
        .then(() => {
          console.log("Add To Favourites Sucessfully");
          getFav(user);
          setAddStatus(false);
        })
        .catch((err) => {
          console.log(err);
          setAddStatus(false);
        });
    } else setNotLogModal(true);
  };

  const removeFavourites = async (id) => {
    const refDoc = doc(db, "favourites", id);
    setLoad(true);
    await deleteDoc(refDoc)
      .then((res) => {
        getFav(user);
        // setLoad(false);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const addToCart = async () => {
    const newProduct = {
      user: user?.email,
      quantity: qty,
      product: prod,
      p_id: prod?.id,
    };

    if (user) {
      setAddStatus(true);
      await getDocs(
        query(
          cartRef,
          where("user", "==", user?.email),
          where("p_id", "==", id)
        )
      ).then(async (res) => {
        const data = res.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }));

        data.length != 0
          ? await updateDoc(doc(db, "cart", data[0].id), {
              quantity: data[0].quantity + qty,
            })
              .then((res) => {
                setAddStatus(false);
                setDummy(dummy + 1);
              })
              .catch((e) => {
                console.log(e);
              })
          : await addDoc(cartRef, newProduct)
              .then((res) => {
                setAddStatus(false);
                setDummy(dummy + 1);
              })
              .catch((e) => {
                console.log(e);
              });
      });
    } else setNotLogModal(true);
  };

  const getFav = async (user) => {
    if (user) {
      const q = query(
        favouritesRef,
        where("user", "==", user?.email),
        where("product_id", "==", id)
      );

      await getDocs(q)
        .then((res) => {
          setFavourite(res.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
          setLoad(false);
        })
        .catch((err) => {
          console.log(err);
        });
    }
  };

  const timeConverter = (timeStamp) => {
    let a = new Date(timeStamp);
    let months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    let year = a.getFullYear();
    let month = months[a.getMonth()];
    let date = a.getDate();
    let hour = a.getHours();
    let min = a.getMinutes();
    let sec = a.getSeconds();
    let time =
      date + " " + month + " " + year + " " + hour + ":" + min + ":" + sec;
    return time;
  };

  return (
    <UseMainLayout isCartUpdated={dummy} dummy>
      <section className="body-font overflow-hidden bg-white text-gray-700">
        <div className="container mx-auto p-4">
          {prod ? (
            <>
              <h1 className="ml-24 mb-4 text-xl font-semibold">
                {prod?.category}
              </h1>
              <div className="mx-auto flex w-full flex-wrap">
                <div className="flex w-full grow-0 flex-row flex-wrap justify-center md:flex-row">
                  {/* Carousel here */}
                  <Carousel data={prod?.image} />
                  <div className="mt-6 flex w-96 shrink flex-col lg:mt-0 lg:flex lg:w-1/2 lg:justify-between lg:py-6 lg:pl-10">
                    <h1 className="title-font mb-1 text-2xl font-medium text-gray-900">
                      {prod?.name}
                    </h1>
                    <div className="mb-4 flex">
                      <Rating value={totalRating} readOnly />
                    </div>
                    <p className="leading-relaxed">{prod?.description}</p>
                    <div className="mt-6 mb-5 flex items-center justify-center border-b-2 border-gray-200 pb-5">
                      {/* Quantity Picker */}
                      <div className="m-4 flex rounded border-indigo-600 border-2">
                        <button
                          className=" hover:bg-indigo-100 active:bg-indigo-300 p-4"
                          onClick={decrementCounter}
                        >
                          <RemoveIcon className="text-black" />
                        </button>
                        <div className="w-20">
                          <h1 className="border-indigo-600 border-l-2 border-r-2 p-4 px-6 justify justify-center align-middle text-xl">
                            {qty}
                          </h1>
                        </div>
                        <button
                          className="hover:bg-indigo-100 active:bg-indigo-300 p-4"
                          onClick={incrementCounter}
                        >
                          <AddIcon className="text-black" />
                        </button>
                      </div>
                    </div>
                    <div className="flex justify-between">
                      <span className="title-font text-2xl font-medium text-gray-900">
                        UNIT= Rs.{prod?.salePrice}
                      </span>
                      <span className=" text-xl font-medium text-gray-900">
                        x{qty}
                      </span>

                      <span className="title-font text-2xl font-medium text-gray-900">
                        Rs. {qty * prod?.salePrice}
                      </span>
                    </div>
                    <div className="mt-4 flex">
                      {addStatus ? (
                        <button
                          type="button"
                          className="flex h-12 w-11/12 items-center justify-center rounded-md border border-transparent bg-indigo-700 py-3 px-8 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                          disabled
                        >
                          <div className="flex gap-4">
                            <div className="flex">
                              <Loader />
                            </div>
                            Adding...
                          </div>
                        </button>
                      ) : (
                        <>
                          {prod?.stock <= 0 ? (
                            <button
                              // onClick={() => {
                              //   addToCart();
                              // }}
                              disabled
                              className=" flex h-12 w-11/12 items-center justify-center rounded-md  bg-red-600 py-3 px-8 text-base font-medium text-white "
                            >
                              ITEM OUT OF STOCK
                            </button>
                          ) : (
                            <button
                              onClick={() => {
                                addToCart();
                              }}
                              className="flex h-12 w-11/12 items-center justify-center rounded-md border border-transparent bg-indigo-600 py-3 px-8 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                            >
                              ADD TO CART
                            </button>
                          )}
                        </>
                      )}
                      {load ? (
                        <button className=" ml-4 flex  h-12 w-1/12 items-center justify-center rounded-md border-0 bg-gray-200 p-0 text-gray-500">
                          <svg
                            role="status"
                            className="mr-2 h-8 w-8 animate-spin fill-blue-600 pl-1 text-gray-200 dark:text-gray-600"
                            viewBox="0 0 100 101"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                              fill="currentColor"
                            />
                            <path
                              d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                              fill="currentFill"
                            />
                          </svg>
                        </button>
                      ) : (
                        <>
                          {favourite[0]?.status ? (
                            <button
                              onClick={() => {
                                removeFavourites(favourite[0]?.id);
                              }}
                              className=" ml-4 inline-flex h-12 w-1/12 items-center justify-center rounded-md border-0 bg-gray-200 p-0 text-gray-500"
                            >
                              <svg
                                fill="red"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth="2"
                                className="h-5 w-5"
                                viewBox="0 0 24 24"
                              >
                                <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z" />
                              </svg>
                            </button>
                          ) : (
                            <button
                              onClick={() => {
                                addToFavourites();
                              }}
                              className=" ml-4 inline-flex h-12 w-1/12 items-center justify-center rounded-md border-0 bg-gray-200 p-0 text-gray-500"
                            >
                              <svg
                                fill="currentColor"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth="2"
                                className="h-5 w-5"
                                viewBox="0 0 24 24"
                              >
                                <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z" />
                              </svg>
                            </button>
                          )}
                        </>
                      )}
                    </div>
                  </div>
                </div>

                <div className="mt-4 w-full p-4 shadow-md">
                  <div className="flex justify-between p-2">
                    <h3 className="text-gray-600">Write a Review</h3>
                    <Rating
                      value={rating}
                      onChange={(e, newVal) => {
                        setRating(newVal);
                      }}
                    />
                  </div>
                  <form
                    className="flex flex-col"
                    onSubmit={handleSubmit((data, event) => {
                      addComment(data, event);
                      // event.target.reset();
                    })}
                    autoComplete="off"
                  >
                    <textarea
                      rows="4"
                      placeholder="Write a review"
                      type="text"
                      {...register("reviews", {
                        required:
                          "Please write a review before clicking the button",
                        minLength: {
                          value: 10,
                          message: "Minimum 10 characters required",
                        },
                      })}
                      className="m-2 w-full rounded-md border border-solid border-gray-400 p-2"
                    />
                    {errors.reviews && (
                      <p className="px-2 text-base text-red-600">
                        {errors.reviews.message}
                      </p>
                    )}
                    <div className="mt-2 flex justify-end">
                      <button
                        type="submit"
                        className="flex h-12 w-32 items-center justify-center rounded-md border border-transparent bg-indigo-600 py-3 px-8 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                      >
                        COMMENT
                      </button>
                    </div>
                  </form>
                  <hr className="m-2 border-b-2 border-gray-300" />
                  <div className="mt-8">
                    <>
                      <h2 className="text-xl font-extrabold">
                        Reviews and Feedback
                      </h2>
                      {getComments?.map((item) => (
                        <div key={item}>
                          <hr className="mt-2" />
                          <div className="mt-2 flex justify-between">
                            <h1 className="font-bold">{item?.user}</h1>
                            <Rating readOnly value={item?.rating} />
                          </div>
                          <div className="flex justify-between">
                            <p className="mt-2 break-normal">{item?.comment}</p>
                            <div className="ml-2 flex shrink-0 items-end text-sm">
                              {timeConverter(item?.time.seconds * 1000)}
                            </div>
                          </div>
                          <hr className="mt-2 mb-2" />
                        </div>
                      ))}
                    </>

                    {moreCommentLoader ? (
                      <div className="w-full">
                        <div className="flex h-full items-center justify-center">
                          <div className="h-20 w-20 animate-spin rounded-full border-t-4 border-b-4 border-blue-900" />
                        </div>
                      </div>
                    ) : isEmpty ? (
                      <div className="flex justify-center">
                        No more comments available!
                      </div>
                    ) : (
                      <div className="flex justify-center">
                        <Button
                          onClick={() => {
                            fetchMoreComments();
                          }}
                          variant="outlined"
                          color="success"
                        >
                          Load More Comments
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </>
          ) : (
            <div className="h-screen">
              <Loader />
            </div>
          )}
        </div>
      </section>
      <Footer />

      {/* Not logged in Modal */}
      <Modal
        open={notLogModal}
        onClose={() => {
          setNotLogModal(false);
        }}
      >
        <div className="absolute top-1/2 left-1/2 w-[400px] -translate-y-1/2 -translate-x-1/2 rounded-lg bg-white p-4 shadow-lg ">
          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-yellow-100">
            <svg
              className="h-8 w-8 text-yellow-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
          </div>
          <hr className="my-2 bg-black " />
          <h1 className="mb-2 text-center text-lg font-bold">Warning!</h1>
          <h1 className="mb-4 text-center text-lg font-bold">
            You are not logged in. Please login to continue.
          </h1>
          <div className="flex items-center justify-center">
            <Link
              to="/sign_in"
              className="flex h-12 w-1/3 items-center justify-center rounded-md bg-blue-600 text-white shadow-md shadow-slate-400 hover:bg-blue-700 hover:drop-shadow-lg focus:shadow-none"
              onClick={() => {
                setNotLogModal(false);
              }}
            >
              Sign In
            </Link>
          </div>
        </div>
      </Modal>
      {/* comment successfull  */}
      <Modal
        open={comModal}
        onClose={() => {
          setComOpen(false);
        }}
      >
        <div className="absolute top-1/2 left-1/2 w-[400px] -translate-y-1/2 -translate-x-1/2 rounded-lg bg-white p-4 shadow-lg ">
          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
            <svg
              className="h-6 w-6 text-green-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M5 13l4 4L19 7"
              ></path>
            </svg>
          </div>
          <hr className="my-2 bg-black " />
          <h1 className="mb-4 text-center text-lg font-bold">
            Comment Added Successfully!
          </h1>
          <div className="flex items-center justify-center">
            <button
              className="h-12 w-1/3 bg-blue-600 shadow-md shadow-slate-400 hover:bg-blue-700 hover:drop-shadow-lg focus:shadow-none"
              onClick={() => {
                setComModal(false);
              }}
            >
              OK
            </button>
          </div>
        </div>
      </Modal>
    </UseMainLayout>
  );
}


///////
Banner



/*
import * as React from "react";
    import Footer from "../User_Pages/Components/Footer";
    import doctor from "../../assets/images/doctor.png";
    import maps from "../../assets/images/maps.jpg";
    import mAppointments from "../../assets/images/makeappointments.png";
    import UseMainLayout from "../../layouts/UserMainLayout";
    import ServicesPagePic from "../../assets/images/services_page.png";

        export default function Services() {
 return (

          <div className="px-auto relative overflow-hidden bg-white pt-36">
            <div className="mx-auto  max-w-7xl">
              <div className="relative z-10 bg-white pb-8 sm:pb-16 md:pb-20 lg:w-full lg:max-w-2xl lg:pb-28 xl:pb-32">
                <svg
                  className="absolute inset-y-0 right-0 hidden h-full w-48 translate-x-1/2 transform text-white lg:block"
                  fill="currentColor"
                  viewBox="0 0 100 100"
                  preserveAspectRatio="none"
                  aria-hidden="true"
                >
                  <polygon points="50,0 100,0 50,100 ,100" />
                </svg>
    
                <main className="mx-10 md:mx-28">
                  <h1 className="pt-16 text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl md:text-6xl">
                    <span className="block xl:inline">Welcome to</span>
                    <span className="block text-green-600 xl:inline">
                      Food Bhaloo 
                    </span>
                  </h1>
                  <p className="mt-3 text-base text-gray-500 sm:mx-auto sm:mt-5 sm:max-w-xl sm:text-lg md:mt-5 md:text-xl lg:mx-0">
                    Here we provide you with complete solution for grocerry shopping or the  onsite shopping hustle .
                  </p>
                </main>
              </div>
            </div>
            <div className="lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2">
              <img
                className="z-0 h-56 w-full object-cover pl-36 sm:h-72 md:h-96 lg:h-full lg:w-full"
                src={ServicesPagePic}
                alt="banner"
              />
            </div>
            <hr />
          </div>

*/

/////////
macdonalds Footer 1 menu 2 support 3 social Follow us 
 <ul>
            <li>Pizza</li>
            <li>Karahi</li>
            <li>Sandwiches</li>
            <li>Burgers</li>

          </ul>


          simple file 
import { React } from "react";

function Div(props) {
  console.log(props);
  const text = props.text;

  return (
    <div>

        <input
          value={props.value}
          onChange={(e) => props.onChange(e.target.value)}
          placeholder="Ammar"
          style={{ height: "20px", width: "100px" }}
        />
   
    </div>
  );
}

export default function Test2(props) {
  const display = props.display;

  return (
    
    <div className="divBody2" style={props.style}>
 


        <Div

          className="inputBody"
          onChange={props.onChange}
          value={props.value}
        />



    </div>
  );
}


Main file
import { React, useState } from "react";

import Test2 from "./Test2";

export default function Test(props) {
  const [repeat, setRepeat] = useState("ammar");
  return (
    <div>
      <div className="divBody">
        <Test2
          value={repeat}
          onChange={setRepeat}
          display={false}
          className="divBody2"
          style={{ borderBottom: "none", backgroundColor: "blue"}}
        ></Test2>
        <Test2
          value={repeat}
          onChange={setRepeat}
          display={true}
          className="divBody2"
          style={{ backgroundColor: "yellow" }}
        />
      </div>

      <div className="divBody">
        <Test2
          value={repeat}
          display={false}
          onChange={setRepeat}
          className="divBody2"
          style={{ backgroundColor: "blue" }}
        ></Test2>


      </div>
    </div>
  );
}


form
// method 1
// const [inputs, setInputs] = useState({});

//   const handleChange = (event) => {
//     const name = event.target.name;
//     const value = event.target.value;
//     setInputs(values => ({...values, [name]: value}))
//   }

//   const handleSubmit = (event) => {
//     event.preventDefault();
//     alert(inputs);
//   }
// method 2
// const [name, setName] = useState("");

// const handleSubmit = (event) => {
//   event.preventDefault();
//   alert(`The name you entered was: ${name}`)
// }

import { React, useState } from "react";
import Region from "../components/Region";
const columns = [
  {
    id: 0,
    name: "Name",
  },
  {
    id: 1,
    name: "Qty",
  },
  {
    id: 2,
    name: "Total",
  },
];
const [inputs, setInputs] = useState({});

const handleChange = (event) => {
  const name = event.target.name;
  const value = event.target.value;
  setInputs((values) => ({ ...values, [name]: value }));
};

const handleSubmit = (event) => {
  event.preventDefault();
  alert(inputs);
};

export default function Order() {
  return (
    <div>
      <div className="">
        <h1>Invoice</h1>
        <table className="productOrderTable">
          <thead>
            <tr className="productOrderTableHeading">
              <th className="productOrderTableHeading1">Name</th>
              <th className="productOrderTableHeading2">Quantity</th>
              <th className="productOrderTableHeading3">Total</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <form onSubmit={handleSubmit} className="formStyle">
          <h2>Contact Information</h2>
          <div>
            <label>
              Enter your name:
              <input
                type="text"
                name="username"
                value={inputs.username || ""}
                onChange={handleChange}
              />
            </label>
            <label>
              Enter your age:
              <input
                type="number"
                name="age"
                value={inputs.age || ""}
                onChange={handleChange}
              />
            </label>
            <input type="submit" />

            <Region />
          </div>
        </form>
      </div>
    </div>
  );
}

how 1 button get all values 
  // const checkout = async () => {
  //   const newItem = {
  //     authUserEamil: user?.email,
  //     email,
  //     name,
  //     address,
  //     city,
  //     postal,
  //     phone,
  //     card,
  //     NOC,
  //     expiry,
  //     cvv,
  //     total,
  //     cart: products,
  //     time: new Date(),
  //   };
  //   console.log(newItem);
  //   await addDoc(checkoutRef, newItem).then((e) => {
  //     // console.log(e);
  //     console.log("sucessfully Checkout");
  //     products.map(async (item) => {
  //       const prod = doc(db, "products", item?.product.id);
  //       await updateDoc(prod, {
  //         stock: item?.product.stock - item?.quantity,
  //       }).then(async (res) => {
  //         const prodDel = doc(db, "cart", item?.id);
  //         await deleteDoc(prodDel).then(() => {
  //           console.log("product deleted from chekout");
  //         });
  //       });
  //     });
  //     // });
  //     getCartItems();

  //     console.log(products);
  //     getTotal();
  //     setOpen(true);
  //   });
  // };



  import React, { useState } from "react";
// import Data from "./Data.json";
// const all = Data.map((p) => p.type); // [17, 17, 35]
// const set = new Set(all); // {17, 35} a set removes duplications, but it's still a set
// const type = Array.from(set);
// console.log(type);
// export default function Content() {
//   const [searchTerm, setSearchTerm] = useState("");
//   const [searchType, setSearchType] = useState("");
//   return (
//     <div>
//       <div className="productsFilter">
//         <div>
//           <label> TYPE</label>
//           <select
//             className="optionsStyle"
//             onChange={(e) => {
//               setSearchType(e.target.value);
//             }}
//           >
//             <option value="Punjab">Select Type</option>
//             {type.map((searchType, id) => {
//               return (
//                 <option key={id} value={searchType}>
//                   {searchType}
//                 </option>
//               );
//             })}
//           </select>
//         </div>
//         <label style={{ margin: "5px 0px 0px 0px" }}> Dish</label>
//         <div className="optionsStyle">
//           <input
//             className=""
//             type="search"
//             placeholder="Search..."
//             onChange={(e) => {
//               setSearchTerm(e.target.value);
//             }}
//           />
//         </div>
//         <button>
//           Search
//           <svg
//             className="searchListIcon"
//             class="w-6 h-6"
//             fill="none"
//             stroke="currentColor"
//             viewBox="0 0 24 24"
//             xmlns="http://www.w3.org/2000/svg"
//           >
//             <path
//               stroke-linecap="round"
//               stroke-linejoin="round"
//               stroke-width="2"
//               d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
//             ></path>
//           </svg>
//         </button>
//       </div>
//       <h1>Products</h1>
//       <div className="productsList">
//         {Data.filter((value) => {
//           if (searchTerm === "") {
//             return value;
//           } else if (
//             value.dish.toLowerCase().includes(searchTerm.toLowerCase())
//           ) {
//             return value;
//           }
//         }).map((product) => (
//           <div key={product.id}>
//             <div className="producteach">
//               <img
//                 className="productsListImg"
//                 src={product.image}
//                 alt={product.name}
//               />
//               <h2 className="productsListName"> {product.name}</h2>
//               <b className="productsListType"> Type:- {product.type}</b>

//               <p className="productsListPrice"> Price: {product.price}</p>
//               <button className="productsListOrder">Order Now</button>
//             </div>
//           </div>
//         ))}
        
//       </div>
//     </div>
//   );
// }

  useEffect(() => {
    callStudents();
    callBooks();
    updateStudent();
    updateBooks();
  }, []);

   function callStudents() {
    const students = await fetch("/students");
    const data = await students.json();
    console.log("here", data);
    setStudentData(data);
  }

  simple map 
   return (
    
    {
      location.state.id.map((res,index)=>{
        return (
          {res.name}
          {res.type}

        )
      })
    }
    

    /// location data
     const location = useLocation();
  // const abc = location.state.id;
  // const [prod, setProd] = useState(abc);
  // console.log(prod);
  // const location = location.state.id;
  // const abc = location.state.id;
  // console.log(abc.name);
 
   // useEffect(() => {
  //   handleOrder();
  // }, []);
     // console.log(product);
    // const students = await fetch("/students");
    // const data = await students.json();
    // console.log("here", data);
    // setStudentData(data);
    
  // const Order = async (id) => {
  //   const newOrder = {
  //     name: name,
  //     lastname: lastname,
  //     email: email,
  //     address: address,
  //   };
  //   if (name && lastname && email && address)
  //   {const eachOrder = (order, id);
  //     await (eachOrder,newOrder).then(() => { navigate("/product")});}
  //   else alert("Please fill all the fields");
  // };
  // console.log(errors);

  new appended
  import React from "react";
import { useState } from "react";
import { useNavigate ,NavLink} from "react-router-dom";
import Data from "../Data.json";

export default function Content() {
  const[cart,setCart]=useState("");
  const [value, setValue] = useState(Data);
  const [search, setSearch] = useState("");
  const [filterValue, setFilterValue] = useState([]);
  const navigate = useNavigate();
  //unique type set define 
  const type = [...new Set(Data.map((obj) => obj.type))].map((type) => {
    return Data.find((obj) => obj.type === type);
  });
// show selected filter type 
  function handler(e) {
    const selectedType = e.target.value;
    const arr = Data.filter((element) => {
      return (element.type === selectedType);
    });

    setValue(arr);
    setFilterValue(arr);
  }
  function handleSearch() {
    if (search === "") {
      setValue(filterValue);
    } else {
      const filterResult = filterValue.filter((item) =>
        item.name.toLowerCase().includes(search.toLowerCase())
      );
      setValue(filterResult);
    }
  }

  function handleClick(product) {
    navigate("/product", { state: { id: product } });
  }

  return (
    <div>
      <div className="productsFilter">
        <div>
          <label> TYPE</label>
          <select className="optionsStyle" onChange={handler}>
            <option value="Punjab">Select Type</option>
            {type.map((response, index) => {
              return <option key={index}>{response.type}</option>;
            })}
          </select>
        </div>

        <label style={{ margin: "5px 0px 0px 0px" }}> Dish</label>
        <div className="optionsStyle">
          <input
            type="text"
            placeholder="Search"
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>
        <button onClick={handleSearch}>
          Search
          <svg
            className="searchListIcon"
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path>
          </svg>
        </button>
      </div>{" "}
      <button
        onClick={() => {
          console.log(cart);
        }}
      >
        CHECKOUT
      </button>
      <h1>Products</h1>
      <div className="productsList">
        {value.map((product) => {
          return (
            <div key={product.id}>
              <div className="producteach">
                <img
                  className="productsListImg"
                  src={product.image}
                  alt={product.name}
                />
                <h2 className="productsListName"> {product.name}</h2>
                <b className="productsListType"> Type:- {product.type}</b>

                <p className="productsListPrice"> Price: {product.price}</p>
                <NavLink to="/product" className="">
                  <button
                    className="productsListOrder"
                    onClick={() => {
                      handleClick(product);
                    }}
                  >
                    Order Now
                  </button>
                </NavLink>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}
checking method
const [order, setOrder] = useState([]);
  const [email, setEmail] = useState({});
  const [name, setName] = useState({});
  const [lastname, setLastName] = useState({});
  const [address, setAddress] = useState({});

  // const Order = async (id) => {
  //   const newOrder = {
  //     name: name,
  //     lastname: lastname,
  //     email: email,
  //     address: address,
  //   };
  //   if (name && lastname && email && address)
  //   {const eachOrder = (order, id);
  //     await (eachOrder,newOrder).then(() => { navigate("/product")});}
  //   else alert("Please fill all the fields");
  // };
  // console.log(errors);
